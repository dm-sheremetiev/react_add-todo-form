{"version":3,"sources":["api/users.ts","components/UsersList/UsersList.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UsersList","usersList","map","user","value","UserInfo","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todosList","todos","userId","usersFromServer","find","App","useState","selectedUser","setSelectedUser","setTitle","isClickedUser","setIsClickedUser","isEmptyTitle","setIsEmptyTitle","isSomeFieldEmpty","pattern","RegExp","action","method","onSubmit","event","sortCopyTodo","sort","todo1","todo2","maxId","length","targetUser","preventDefault","undefined","push","type","placeholder","onChange","targetValue","target","currentInputLetter","slice","test","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.acf9f27e.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/user';\n\ntype Props = {\n  usersList: User[];\n};\n\nexport const UsersList: React.FC<Props> = ({ usersList }) => {\n  return (\n    <>\n      {usersList.map(user => (\n        <option\n          value={user.name}\n          key={user.id}\n        >\n          {user.name}\n        </option>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { User } from '../../types/user';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/todo';\n\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article className={classNames(\n      'TodoInfo',\n      {\n        'TodoInfo--completed': todo.completed === true,\n      },\n    )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todosList: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todosList }) => (\n  <section className=\"TodoList\">\n    {todosList.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport { ChangeEvent, useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { UsersList } from './components/UsersList/UsersList';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/user';\nimport { Todo } from './types/todo';\n\nfunction getUser(userId: number): User | undefined {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [title, setTitle] = useState('');\n  const [isClickedUser, setIsClickedUser] = useState(false);\n  const [isEmptyTitle, setIsEmptyTitle] = useState(false);\n  const isSomeFieldEmpty = !title || selectedUser === '0';\n\n  const pattern = new RegExp('[а-яА-ЯёЁA-Za-z0-9 ]');\n\n  const handleSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(event.target.value);\n  };\n\n  const handleTitleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const targetValue = event.target.value;\n    const currentInputLetter = targetValue.slice(-1);\n\n    if (pattern.test(currentInputLetter)) {\n      setTitle(targetValue);\n    } else {\n      setTitle(targetValue.slice(0, -1));\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    const sortCopyTodo = [...todos].sort((todo1, todo2) => todo1.id - todo2.id);\n    const maxId = sortCopyTodo[sortCopyTodo.length - 1].id + 1;\n    const targetUser = usersFromServer.find(user => user.name === selectedUser);\n\n    event.preventDefault();\n\n    if (isSomeFieldEmpty) {\n      if (selectedUser === '0') {\n        setIsClickedUser(true);\n      }\n\n      if (title === '') {\n        setIsEmptyTitle(true);\n      }\n\n      return;\n    }\n\n    if (targetUser !== undefined) {\n      todos.push({\n        id: maxId,\n        title,\n        completed: false,\n        userId: targetUser.id,\n        user: targetUser,\n      });\n\n      setSelectedUser('0');\n      setTitle('');\n      setIsEmptyTitle(false);\n      setIsClickedUser(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <label>\n          {'Title: '}\n          <div className=\"field\">\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handleTitleChange}\n            />\n\n            {!title && isEmptyTitle\n              && <span className=\"error\">Please enter a title</span>}\n          </div>\n        </label>\n\n        <label>\n          {'User: '}\n          <div className=\"field\">\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUser}\n              onChange={handleSelectChange}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              <UsersList usersList={usersFromServer} />\n            </select>\n\n            {selectedUser === '0' && isClickedUser\n              && <span className=\"error\">Please choose a user</span>}\n          </div>\n        </label>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todosList={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}